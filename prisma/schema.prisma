datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  // custom fields
  role          Role        @default(USER)
  baseLangs     String[]
  accounts      Account[]
  sessions      Session[]
  subs          Sub[]
  reviews       SubReview[]
  requests      Request[]
  files         File[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Video {
  url       String    @id @unique
  serviceId String
  videoId   String
  subs      Sub[]
  requests  Request[]

  @@unique([serviceId, videoId])
}

model InfoYoutube {
  id          String    @id
  publishedAt DateTime?
  channelId   String?
  title       String?
  description String?
  viewCount   Int?
  likeCount   Int?
}

model Request {
  id        String @id @default(cuid())
  serviceId String
  videoId   String
  video     Video  @relation(fields: [serviceId, videoId], references: [serviceId, videoId], onDelete: Cascade)
  users     User[]
  lang      String

  @@unique([serviceId, videoId, lang])
}

model File {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Sub    Sub?
  title  String
  key    String
}

model Sub {
  id        String      @id @default(cuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  fileId    String      @unique
  file      File        @relation(fields: [fileId], references: [id])
  serviceId String
  videoId   String
  video     Video       @relation(fields: [serviceId, videoId], references: [serviceId, videoId])
  reviews   SubReview[]
  lang      String
  status    Status      @default(PENDING)
  views     Int         @default(0)

  @@unique([serviceId, videoId, lang, userId])
}

model SubReview {
  id      String  @id @default(cuid())
  subId   String
  sub     Sub     @relation(fields: [subId], references: [id], onDelete: Cascade)
  userId  String
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  score   Decimal
  comment String?
}

enum Role {
  ADMIN
  REVIEWER
  USER
}

enum Status {
  PENDING
  APPROVED
  REJECTED
  REPORTED
}
