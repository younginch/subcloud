datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  // custom fields
  password      String?
  role          Role           @default(User)
  point         Int            @default(0)
  baseLangs     String[]
  settlePoints  SettlePoint[]
  accounts      Account[]
  sessions      Session[]
  subs          Sub[]
  comments      Comment[]
  requests      Request[]
  files         File[]
  requestPoints RequestPoint[]
  reviews       Review[]
  orders        Order[]
  subHistories  SubHistory[]
  subscriptions Subscription[]
  coupons       Coupon[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Video {
  url            String        @id @unique
  serviceId      String
  videoId        String        @unique
  subs           Sub[]
  requests       Request[]
  youtubeVideoId String?       @unique
  youtubeVideo   YoutubeVideo? @relation(fields: [youtubeVideoId], references: [id])
  examplevideo   ExampleVideo? 

  @@unique([serviceId, videoId])
}

model ExampleVideo {
  id          String         @id @unique
  video       Video          @relation(fields: [id], references: [videoId], onDelete: Cascade)
}

model YoutubeVideo {
  id          String         @id
  video       Video?
  channelId   String
  channel     YoutubeChannel @relation(fields: [channelId], references: [id])
  publishedAt DateTime
  title       String
  description String
  viewCount   Int
  likeCount   Int
}

model YoutubeChannel {
  id              String         @id
  videos          YoutubeVideo[]
  title           String
  description     String
  thumbnailUrl    String
  subscriberCount Int
  channelUrl      String
}

model Request {
  id            String         @id @default(cuid())
  serviceId     String
  videoId       String
  video         Video          @relation(fields: [serviceId, videoId], references: [serviceId, videoId], onDelete: Cascade)
  users         User[]
  lang          String
  point         Int            @default(0)
  requestPoints RequestPoint[]

  @@unique([serviceId, videoId, lang])
}

model File {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Sub    Sub?
  title  String
  key    String
}

model Sub {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  fileId    String    @unique
  file      File      @relation(fields: [fileId], references: [id])
  serviceId String
  videoId   String
  video     Video     @relation(fields: [serviceId, videoId], references: [serviceId, videoId])
  comments  Comment[]
  lang      String
  status    Status    @default(Pending)
  views     Int       @default(0)

  reviews      Review[]
  subHistories SubHistory[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@unique([serviceId, videoId, lang, userId])
}

model SubHistory {
  id     String   @id @default(cuid())
  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subId  String
  sub    Sub      @relation(fields: [subId], references: [id])
  viewAt DateTime
}

model Review {
  id         String     @id @default(cuid())
  reviewerId String
  reviewer   User       @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  subId      String
  sub        Sub        @relation(fields: [subId], references: [id])
  type       ReviewType
  content    String?
  startTime  Int
  endTime    Int
  resolved   Boolean    @default(false)
}

model Comment {
  id      String  @id @default(cuid())
  subId   String
  sub     Sub     @relation(fields: [subId], references: [id], onDelete: Cascade)
  userId  String
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  score   Decimal
  comment String?
}

model Order {
  id         String      @id @default(cuid())
  amount     Int
  paymentKey String?
  type       OrderType
  status     OrderStatus @default(Pending)
  approvedAt DateTime?

  userId         String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptionId String?
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
}

enum OrderType {
  ChargePoint
  MonthlyBasic
  YearlyBasic
}

enum OrderStatus {
  Pending
  Completed
  Failed
  Refunded
}

model Subscription {
  id          String           @id @default(cuid())
  type        SubscriptionType
  lastOrderAt DateTime
  endAt       DateTime
  billingKey  String?
  card        Json?

  userId String
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]
}

enum SubscriptionType {
  Basic
}

model Coupon {
  id     String     @id @default(cuid())
  code   String?
  type   CouponType
  isUsed Boolean    @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum CouponType {
  ChargePoint
  OneMonthBasic
  OneYearBasic
  TwoWeeksBasicTrial
}

model RequestPoint {
  id        String  @id @default(cuid())
  requestId String
  request   Request @relation(fields: [requestId], references: [id], onDelete: Cascade)
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  point     Int
}

enum Role {
  Admin
  Reviewer
  User
}

enum Status {
  Pending
  Approved
  Rejected
  Reported
}

enum ReviewType {
  Mistranslation
  IncorrectTiming
  NoSubtitle
  IncorrectTitle
  IncorrectLanguage
  GuidelineViolation
  Etc
}

model Settle {
  id           String        @id @default(cuid())
  settlePoints SettlePoint[]
  totalPoint   Int
  startAt      DateTime
  endAt        DateTime
}

model SettlePoint {
  id       String @id @default(cuid())
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  settleId String
  settle   Settle @relation(fields: [settleId], references: [id], onDelete: Cascade)
  point    Int
}
